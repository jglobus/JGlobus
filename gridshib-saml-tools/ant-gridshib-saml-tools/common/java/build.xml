<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="GridShib-SAML-Tools" default="install" basedir=".">

  <description>GridShib SAML Tools buildfile</description>

  <!-- load environment variables -->
  <property environment="env"/>

  <!-- load user build.properties file -->
  <property file="${user.home}/build.properties"/>
  <!-- load build.properties file (created dynamically when dist created) -->
  <property file="build.properties"/>
    
  <!-- install directory -->
  <property name="gridshib.install" value="${basedir}"/>
  <property name="gridshib.home" location="${basedir}"/>

  <!-- directories created during build -->
  <property name="gridshib.build" value="build" />
  <property name="gridshib.build.dest" value="${gridshib.build}/classes"/>
  <property name="gridshib.conf" 
            value="${gridshib.src}/org/globus/gridshib/resource"/>
  
  <!-- relative location of GridShib Common docs -->
  <property name="gridshib.javadocs" value="${gridshib.doc}/api"/>
  <!-- absolute location of GridShib Common docs -->
  <property name="gridshib.javadocs.abs" location="${gridshib.javadocs}"/>
  <!-- location of Globus SAML Library docs relative to ${gridshib.javadocs} -->
  <property name="globus.saml.javadocs" value="../library/api"/>
  <!-- absolute location of Globus SAML Library docs -->
  <property name="globus.saml.javadocs.abs" 
            location="${gridshib.javadocs}/${globus.saml.javadocs}"/>

  <!-- compute derived paths -->
  <property name="gridshib.bootPath"
            location="${gridshib.conf}/gridshib-bootstrap.properties"/>
  <!-- compute jar file names -->
  <property name="gridshib.saml.jarfile" 
            value="${gridshib.lib}/${package.name}.jar"/>
  <property name="gridshib.common.jarfile" 
            value="${gridshib.lib}/gridshib-common-${version.number}.jar"/>

  <!-- build and test -->
  
  <target name="install" 
    depends="clean-all, create-jars, test-install, create-installed-docs"
    description="Build and test the source distribution">
    <chmod dir="${gridshib.bin}" excludes="*.bat" perm="755"/>
    <chmod dir="${gridshib.bin}" includes="*.bat" perm="644"/>
    <!--<chmod dir="${gridshib.etc}" includes="**/*key.pem" perm="600"/>-->
  </target>
  
  <target name="create-jars" 
    depends="create-globus-saml-jar, create-gridshib-jars"
    description="Creates all required JAR files"/>
  
  <target name="create-globus-saml-jar"
    depends="check-globus-saml-jar" unless="globus-saml-jar-exists"
    description="Create Globus SAML Library JAR file">
    <property name="dist" location="${gridshib.lib}"/>
    <!-- at most one of these Globus SAML targets will be run -->
    <antcall target="run-globus-saml-create-jar"/>
    <antcall target="run-globus-saml-dist"/>
  </target>
  
  <target name="run-globus-saml-create-jar" 
    depends="check-run-globus-saml-tests" 
    if="create-globus-saml-jar-only">
    <echo message="Creating jar file for Globus SAML Library..."/>
    <ant dir="${globus.saml.java}" target="create-jar"/>
  </target>
  
  <target name="run-globus-saml-dist" 
    depends="check-run-globus-saml-tests" 
    unless="create-globus-saml-jar-only">
    <echo message="Running tests and creating jar file for Globus SAML Library..."/>
    <ant dir="${globus.saml.java}" target="dist"/>
  </target>
  
  <target name="create-gridshib-jars" depends="clean-build, compile"
    description="Create GridShib SAML Tools JAR files">
    <jar destfile="${gridshib.common.jarfile}">
      <fileset dir="${gridshib.build.dest}">
        <patternset refid="dist-fileset"/>
      </fileset>
    </jar>
    <jar destfile="${gridshib.saml.jarfile}">
      <fileset dir="${gridshib.build.dest}">
        <patternset refid="no-dist-fileset"/>
      </fileset>
    </jar>
  </target>

  <target name="test-install" 
    depends="test-cli, test-api"/>
  
  <target name="test-api" 
    depends="check-run-tests" unless="do-not-run-tests"
    description="Test Java API">
    <antcall target="run-tests"/>
  </target>
  
  <!-- javadocs targets -->
  
  <target name="create-installed-docs" 
    depends="check-docs" unless="do-not-create-docs">
    <antcall target="create-docs"/>
  </target>
  
  <target name="create-docs">
    <echo message="Creating Globus SAML Library API documentation..."/>
    <ant dir="${globus.saml.java}" target="javadocs">
      <property name="javadocs" value="${globus.saml.javadocs.abs}"/>
    </ant>
    <echo message="Creating GridShib Common API documentation at location ${gridshib.javadocs.abs}"/>
    <mkdir dir="${gridshib.javadocs}" />
    <javadoc destdir="${gridshib.javadocs}"
      author="true" version="true" use="true" protected="true"
      windowtitle="GridShib Common ${version.number} Java API">
      <packageset dir="${gridshib.src}" defaultexcludes="yes">
        <patternset refid="dist-fileset"/>
      </packageset>
      <doctitle><![CDATA[<h1>GridShib Common</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2007-2008 University of Illinois. All Rights Reserved.</i>]]></bottom>
      <classpath refid="classpath" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
      <link href="http://www.globus.org/api/javadoc-4.1.0/globus_java_ws_core"/>
      <link href="http://www-unix.globus.org/cog/distribution/1.4/api"/>
      <link href="${globus.saml.javadocs}"/>
    </javadoc>
  </target>

  <!-- compilation targets -->
  
  <target name="compile-tests" depends="compile"
    description="Compile all source files in ${gridshib.tests}">
    <javac destdir="${gridshib.build.dest}"
           deprecation="on" debug="on" source="1.4">
      <classpath refid="classpath" />
      <src path="${gridshib.tests}"/>
    </javac>
    <!-- copy any property files to the destination dir -->
    <copy todir="${gridshib.build.dest}">
      <fileset dir="${gridshib.tests}" includes="**/*.properties"/>
    </copy>
  </target>

  <target name="compile" depends="init"
    description="Compile all source files in ${gridshib.src}">
    <javac destdir="${gridshib.build.dest}" 
           deprecation="on" debug="on" source="1.4">
      <classpath refid="classpath" />
      <src path="${gridshib.src}"/>
    </javac>
    <!-- copy any property files to the destination dir -->
    <copy todir="${gridshib.build.dest}">
      <fileset dir="${gridshib.src}" includes="**/*.properties"/>
    </copy>
  </target>
  
  <property name="default.logFilePath"
            value="${gridshib.logs}/saml-tools.log"/>

  <target name="init" depends="create-log4j-props, create-boot-props">
    <mkdir dir="${gridshib.build.dest}"/>
    <mkdir dir="${gridshib.logs}"/>
    <chmod file="${gridshib.logs}" type="dir" perm="777"/>
    <touch file="${default.logFilePath}"/>
    <chmod file="${default.logFilePath}" perm="666"/>
    <echo message="Default log file: ${default.logFilePath}"/>
    <condition property="java-keystore-exists">
      <available file="${gridshib.keyStorePath}"/>
    </condition>
  </target>
    
  <property name="default.logConfigPath"
            value="${gridshib.etc}/log4j.properties"/>

  <target name="create-log4j-props"
    description="Create log4j properties file">
    <copy file="${gridshib.templates}/standalone-gs-st-log4j.properties" 
          tofile="${default.logConfigPath}"/>
    <echo message="Default log config: ${default.logConfigPath}"/>
  </target>
  
  <!-- compute default bootstrap property values -->
  <property name="gridshib.SAMLToolsConfigPath.abs"
            location="${gridshib.SAMLToolsConfigPath}"/>
  <property name="gridshib.dbConfigPath.abs"
            location="${gridshib.dbConfigPath}"/>
  <property name="gridshib.logConfigPath.abs"
            location="${gridshib.logConfigPath}"/>
  <property name="gridshib.cogConfigPath.abs"
            location="${gridshib.cogConfigPath}"/>
  <property name="gridshib.certPath.abs" 
            location="${gridshib.certPath}"/>
  <property name="gridshib.keyPath.abs" 
            location="${gridshib.keyPath}"/>
  <property name="gridshib.identityAttributesPath.abs" 
            location="${gridshib.identityAttributesPath}"/>
  <property name="gridshib.keyStorePath.abs" 
            location="${gridshib.keyStorePath}"/>
  <property name="gridshib.keyStorePassword" value="gridshib"/>
  <property name="gridshib.keyStoreKeyAlias" value="test-jks-cred"/>
  <property name="gridshib.keyStoreKeyPassword" value="gridshib"/>

  <target name="create-boot-props"
    depends="check-include-bootstrap-properties, check-config-path"
    unless="do.not.include.bootstrap.properties"
    description="Create bootstrap properties file">
    <mkdir dir="${gridshib.conf}"/>
    <propertyfile file="${org.globus.gridshib.config}">
      <entry key="gridshib.SAMLToolsConfigPath" 
             value="${gridshib.SAMLToolsConfigPath.abs}"/>
      <entry key="gridshib.dbConfigPath" 
             value="${gridshib.dbConfigPath.abs}"/>
      <entry key="gridshib.logConfigPath" 
             value="${gridshib.logConfigPath.abs}"/>
      <entry key="gridshib.cogConfigPath" 
             value="${gridshib.cogConfigPath.abs}"/>
      <entry key="gridshib.certPath" 
             value="${gridshib.certPath.abs}"/>
      <entry key="gridshib.keyPath" 
             value="${gridshib.keyPath.abs}"/>
      <entry key="gridshib.identityAttributesPath" 
             value="${gridshib.identityAttributesPath.abs}"/>
      <entry key="gridshib.keyStorePath" 
             value="${gridshib.keyStorePath.abs}"/>
      <entry key="gridshib.keyStorePassword" 
             value="${gridshib.keyStorePassword}"/>
      <entry key="gridshib.keyStoreKeyAlias" 
             value="${gridshib.keyStoreKeyAlias}"/>
      <entry key="gridshib.keyStoreKeyPassword" 
             value="${gridshib.keyStoreKeyPassword}"/>
    </propertyfile>
  </target>
  
  <!-- database and database connection properties -->
  
  <!-- properties for embedded database -->
  <property name="db.location" value="var/gram"/>
  <property name="audit.db.name" value="gt4audit"/>
  <property name="db.path" value="${db.location}/${audit.db.name}"/>
  <property name="db.path.abs" location="${db.path}"/>

  <!-- optionally override these default props on the command line -->
  <!-- (also see targets "set-mysql-properties" and "set-postgresql-properties" below) -->
  <property name="db.prod.name" value="derby"/>
  <property name="db.host" value="localhost"/>
  <property name="db.name" value="${audit.db.name}"/>
  <property name="db.username" value="globus"/>
  <property name="db.password" value="GrAmAuDiT"/>

  <property name="db.alter.file.in" 
            location="${gridshib.templates}/gram_audit_alter_table.sql.in"/>
  <property name="db.alter.file"
            location="${gridshib.etc}/gram_audit_alter_table.sql"/>

  <target name="alter-audit-table" depends="load-audit-table"
    description="Adds a column and loads more test data into a local GRAM audit table">
    <copy file="${db.alter.file.in}" tofile="${db.alter.file}"/>
    <replace file="${db.alter.file}">
      <replacefilter token="@DATETIME@" value="${gram.audit.NOW}"/>
    </replace>
    <echo message="Altering GRAM audit table"/>
    <java classname="org.apache.derby.tools.ij" 
          fork="true" failonerror="yes">
      <jvmarg value="-Dderby.system.home=${gridshib.home}"/>
      <jvmarg value="-Dderby.infolog.append=true"/>
      <jvmarg value="-Dij.protocol=jdbc:derby:directory:"/>
      <jvmarg value="-Dij.database=${db.path}"/>
      <jvmarg value="-Dij.user=${db.username}"/>
      <jvmarg value="-Dij.password=${db.password}"/>
      <classpath>
        <!--<pathelement location="${gridshib.home}"/>-->
        <fileset dir="${gridshib.home}/lib">
          <include name="derby*.jar"/>
        </fileset>
      </classpath>
      <arg value="${db.alter.file}"/>
    </java>
  </target>
  
  <property name="db.load.file.in" 
            location="${gridshib.templates}/gram_audit_table_init.sql.in"/>
  <property name="db.load.file"
            location="${gridshib.etc}/gram_audit_table_init.sql"/>

  <target name="load-audit-table" depends="create-audit-db"
    description="Loads test data into a local GRAM audit table">
    <copy file="${db.load.file.in}" tofile="${db.load.file}"/>
    <tstamp prefix="gram.audit">
      <format property="NOW" 
              pattern="yyyy-MM-dd HH:mm:ss" timezone="UTC" locale="en"/>
    </tstamp>
    <replace file="${db.load.file}">
      <replacefilter token="@DATETIME@" value="${gram.audit.NOW}"/>
    </replace>
    <echo message="Loading GRAM audit table"/>
    <java classname="org.apache.derby.tools.ij" 
          fork="true" failonerror="yes">
      <jvmarg value="-Dderby.system.home=${gridshib.home}"/>
      <jvmarg value="-Dderby.infolog.append=true"/>
      <jvmarg value="-Dij.protocol=jdbc:derby:directory:"/>
      <jvmarg value="-Dij.database=${db.path}"/>
      <jvmarg value="-Dij.user=${db.username}"/>
      <jvmarg value="-Dij.password=${db.password}"/>
      <classpath>
        <!--<pathelement location="${gridshib.home}"/>-->
        <fileset dir="${gridshib.home}/lib">
          <include name="derby*.jar"/>
        </fileset>
      </classpath>
      <arg value="${db.load.file}"/>
    </java>
  </target>
  
  <property name="db.schema.file.in" 
            location="${gridshib.templates}/gram_audit_v1_schema_derby.sql.in"/>
  <property name="db.schema.file"
            location="${gridshib.etc}/gram_audit_v1_schema_derby.sql"/>

  <target name="create-audit-db" depends="create-db-props">
    <copy file="${db.schema.file.in}" tofile="${db.schema.file}"/>
    <replace file="${db.schema.file}">
      <replacefilter token="@USERNAME@" value="${db.username}"/>
      <replacefilter token="@PASSWORD@" value="${db.password}"/>
    </replace>
    <mkdir dir="${db.location}"/>
    <echo message="Creating embedded database: ${db.path.abs}"/>
    <java classname="org.apache.derby.tools.ij" 
          fork="true" failonerror="yes">
      <jvmarg value="-Dderby.system.home=${gridshib.home}"/>
      <jvmarg value="-Dderby.infolog.append=true"/>
      <jvmarg value="-Dij.protocol=jdbc:derby:directory:"/>
      <jvmarg value="-Dij.database=${db.path};create=true"/>
      <classpath>
        <!--<pathelement location="${gridshib.home}"/>-->
        <fileset dir="${gridshib.home}/lib">
          <include name="derby*.jar"/>
        </fileset>
      </classpath>
      <arg value="${db.schema.file}"/>
    </java>
  </target>
  
  <property name="db.properties.file"
            location="${gridshib.dbConfigPath.abs}"/>

  <target name="create-db-props"
    description="Create DB connection properties file">
    <condition property="configure.embedded.derby.db">
      <and>
        <not>
          <available file="${db.properties.file}" type="file"/>
        </not>
        <isset property="db.prod.name"/>
        <equals arg1="${db.prod.name}" arg2="derby"/>
      </and>
    </condition>
    <condition property="configure.mysql.db">
      <and>
        <not>
          <available file="${db.properties.file}" type="file"/>
        </not>
        <isset property="db.prod.name"/>
        <equals arg1="${db.prod.name}" arg2="mysql"/>
      </and>
    </condition>
    <condition property="configure.postgresql.db">
      <and>
        <not>
          <available file="${db.properties.file}" type="file"/>
        </not>
        <isset property="db.prod.name"/>
        <equals arg1="${db.prod.name}" arg2="postgresql"/>
      </and>
    </condition>
    <condition property="configure.network.db">
      <or>
        <isset property="configure.mysql.db"/>
        <isset property="configure.postgresql.db"/>
      </or>
    </condition>
    <antcall target="create-db-props-decision"/>
  </target>
  
  <target name="create-db-props-decision"
    depends="create-embedded-db-props, create-network-db-props">
  </target>
  
  <target name="create-embedded-db-props" if="configure.embedded.derby.db">
    <property name="db.properties.file.in" 
              location="${gridshib.templates}/db-connection-derby.properties"/>
    <echo message="Creating derby database connection properties: ${db.properties.file}"/>
    <copy file="${db.properties.file.in}" tofile="${db.properties.file}"/>
    <replace file="${db.properties.file}">
      <replacefilter token="@DB_PATH@" value="${db.path}"/>
      <replacefilter token="@USERNAME@" value="${db.username}"/>
      <replacefilter token="@PASSWORD@" value="${db.password}"/>
    </replace>
  </target>
  
  <target name="create-network-db-props" if="configure.network.db"
    depends="set-mysql-properties, set-postgresql-properties">
    <echo message="Creating ${db.prod.name} database connection properties: ${db.properties.file}"/>
    <copy file="${db.properties.file.in}" tofile="${db.properties.file}"/>
    <replace file="${db.properties.file}">
      <replacefilter token="@DB_HOST@" value="${db.host}"/>
      <replacefilter token="@DB_PORT@" value="${db.port}"/>
      <replacefilter token="@DB_NAME@" value="${db.name}"/>
      <replacefilter token="@USERNAME@" value="${db.username}"/>
      <replacefilter token="@PASSWORD@" value="${db.password}"/>
    </replace>
  </target>
  
  <!-- optionally override these default props on the command line -->
  <target name="set-mysql-properties" if="configure.mysql.db">
    <echo message="Setting MySQL default properties"/>
    <property name="db.properties.file.in" 
              location="${gridshib.templates}/db-connection-mysql.properties"/>
    <property name="db.port" value="3306"/>
  </target>
  <target name="set-postgresql-properties" if="configure.postgresql.db">
    <echo message="Setting PostgreSQL default properties"/>
    <property name="db.properties.file.in" 
              location="${gridshib.templates}/db-connection-postgresql.properties"/>
    <property name="db.port" value="5432"/>
  </target>
  
  <target name="clean-db-all"
    depends="clean-db-embedded, clean-db-props"
    description="Clean all database directories and files">
  </target>

  <target name="clean-db-embedded"
    description="Clean embedded database and scripts">
    <delete file="${db.alter.file}"/>
    <delete file="${db.load.file}"/>
    <delete file="${db.schema.file}"/>
    <delete dir="${db.location}"/>
  </target>

  <target name="clean-db-props"
    description="Clean database connection properties file">
    <delete file="${db.properties.file}"/>
  </target>

  <!-- classpath and filesets -->
  
  <path id="classpath">
    <!--<pathelement location="."/>  why? -->
    <!--<pathelement location="${java.home}/../lib/tools.jar"/>  huh? -->
    <pathelement location="${gridshib.build.dest}"/>
    <fileset dir="${gridshib.lib}">
      <include name="*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
  </path>

  <path id="test-cli-classpath">
    <fileset dir="${gridshib.lib}">
      <include name="*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
  </path>

  <patternset id="dist-fileset">
    <include name="org/globus/gridshib/common/**"/>
    <include name="org/globus/gridshib/config/**"/>
    <include name="org/globus/gridshib/security/**"/>
    <include name="org/teragrid/ncsa/gridshib/gram/**"/>
    <include name="org/teragrid/ncsa/gridshib/security/**"/>
  </patternset>

  <patternset id="no-dist-fileset">
    <exclude name="org/globus/gridshib/common/**"/>
    <exclude name="org/globus/gridshib/config/**"/>
    <exclude name="org/globus/gridshib/security/**"/>
    <exclude name="org/teragrid/ncsa/gridshib/gram/**"/>
    <exclude name="org/teragrid/ncsa/gridshib/security/**"/>
  </patternset>

  <!-- boolean targets -->
  
  <target name="check-run-tests">
    <condition property="do-not-run-tests">
      <equals arg1="${run.tests}" arg2="false"/>
    </condition>
    <antcall target="echo-tests-decision"/>
  </target>
  
  <target name="check-run-globus-saml-tests">
    <condition property="create-globus-saml-jar-only">
      <equals arg1="${run.globus.saml.tests}" arg2="false"/>
    </condition>
  </target>
  
  <target name="check-docs">
    <uptodate property="javadocs.exist"
              targetfile="${gridshib.javadocs}/index.html">
      <srcfiles dir="${gridshib.src}" includes="**/*.java"/>
    </uptodate>
    <condition property="do-not-create-docs">
      <or>
        <equals arg1="${create.docs}" arg2="false"/>
        <equals arg1="${javadocs.exist}" arg2="false"/>
      </or>
    </condition>
    <antcall target="echo-docs-decision"/>
  </target>
  
  <target name="check-globus-saml-jar">
    <uptodate property="globus-saml-jar-exists"
              targetfile="${gridshib.lib}/${globus.saml.name}.jar">
      <srcfiles dir="${globus.saml.java}/src" includes="**/*.java"/>
    </uptodate>
    <antcall target="echo-globus-saml-jar-decision"/>
  </target>

  <target name="check-include-bootstrap-properties">
    <condition property="do.not.include.bootstrap.properties">
      <and>
        <isset property="include.boot.properties"/>
        <isfalse value="${include.boot.properties}"/>
      </and>
    </condition>
  </target>
  
  <target name="check-config-path">
    <condition property="use-system-config-path">
      <isset property="org.globus.gridshib.config"/>
    </condition>
    <condition property="use-default-config-path">
      <and>
        <not>
          <isset property="org.globus.gridshib.config"/>
        </not>
      </and>
    </condition>
    <antcall target="echo-config-path-decision"/>
    <condition property="org.globus.gridshib.config" 
               value="${gridshib.bootPath}">
      <not>
        <isset property="org.globus.gridshib.config"/>
      </not>
    </condition>
  </target>

  <!-- decision-making targets -->
  
  <target name="echo-tests-decision" depends="echo-tests-yes, echo-tests-no"/>
  <target name="echo-tests-yes" unless="do-not-run-tests">
      <echo message="GridShib SAML Tools unit tests will be run"/>
  </target>
  <target name="echo-tests-no" if="do-not-run-tests">
      <echo message="GridShib SAML Tools unit tests will not be run"/>
  </target>

  <target name="echo-globus-saml-tests-decision" 
          depends="echo-globus-saml-tests-yes, echo-globus-saml-tests-no"/>
  <target name="echo-globus-saml-tests-yes" 
          depends="check-run-globus-saml-tests" unless="create-globus-saml-jar-only">
      <echo message="Globus SAML Library unit tests will be run"/>
  </target>
  <target name="echo-globus-saml-tests-no" 
          depends="check-run-globus-saml-tests" if="create-globus-saml-jar-only">
      <echo message="Globus SAML Library unit tests will not be run"/>
  </target>
  
  <target name="echo-docs-decision" depends="echo-docs-yes, echo-docs-no"/>
  <target name="echo-docs-yes" unless="do-not-create-docs">
    <echo message="Java API documentation will be created"/>
  </target>
  <target name="echo-docs-no" if="do-not-create-docs">
    <echo message="Java API documentation will not be created"/>
  </target>

  <target name="echo-globus-saml-jar-decision" 
          depends="echo-globus-saml-jar-yes, echo-globus-saml-jar-no"/>
  <target name="echo-globus-saml-jar-yes" unless="globus-saml-jar-exists">
    <echo message="Globus SAML Library jar file will be created"/>
    <antcall target="echo-globus-saml-tests-decision"/>
  </target>
  <target name="echo-globus-saml-jar-no" if="globus-saml-jar-exists">
    <echo message="Globus SAML Library jar file will not be created"/>
  </target>

  <target name="echo-config-path-decision" 
          depends="echo-system-config-path, echo-default-config-path"/>
  <target name="echo-system-config-path" if="use-system-config-path">
    <echo message="Using system property org.globus.gridshib.config: ${org.globus.gridshib.config}"/>
  </target>
  <target name="echo-default-config-path" if="use-default-config-path">
    <echo message="Using default config path: ${gridshib.bootPath}"/>
  </target>

  <!-- java execution targets -->
  
  <target name="test-cli" depends="compile">
    <echo message="Testing command-line interface of GridShib SAML Tools"/>
    <echo message="Setting system property org.globus.gridshib.config to ${org.globus.gridshib.config}"/>
    <echo message="Running test #1..."/>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
    </java>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #2..."/>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-u trscavo"/>
      <arg value="-K"/>
    </java>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #3..."/>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-u trscavo"/>
      <arg value="-V"/>
    </java>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #4..."/>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-u trscavo"/>
      <arg value="-V"/>
      <arg value="-o testassertion.xml"/>
    </java>
    <echo message="Output in testassertion.xml"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #5..."/>
    <java classname="org.globus.gridshib.tool.x509.X509BindingTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-f testassertion.xml"/>
      <arg value="-S"/>
      <arg value="-O 1.3.6.1.4.1.3536.1.1.1.12"/>
      <arg value="-o testproxy.pem"/>
    </java>
    <echo message="Output in testproxy.pem"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #6..."/>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-u trscavo"/>
      <arg value="-V"/>
      <arg value="-A"/>
      <arg value="-o testextension.der"/>
    </java>
    <echo message="Output in testextension.der"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #7..."/>
    <java classname="org.globus.gridshib.tool.x509.X509BindingTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-f testextension.der"/>
      <arg value="-A"/>
      <arg value="-O 1.3.6.1.4.1.3536.1.1.1.12"/>
      <arg value="-o testproxy2.pem"/>
    </java>
    <echo message="Output in testproxy2.pem"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #8..."/>
    <property name="dateTime.pattern" value="yyyy-MM-dd'T'HH:mm:ssZ"/>
    <tstamp prefix="iso.8601">
      <format property="NOW" pattern="${dateTime.pattern}" locale="en"/>
    </tstamp>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-u trscavo"/>
      <arg value="-V"/>
      <arg value="-a"/>
      <arg value="-I ${iso.8601.NOW}"/>
      <arg value="-D dateTime.pattern=${dateTime.pattern}"/>
      <arg value="-X"/>
      <arg value="-o testproxy3.pem"/>
    </java>
    <echo message="Output in testproxy3.pem"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #9..."/>
    <java classname="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-u trscavo"/>
      <arg value="-V"/>
      <arg value="-a"/>
      <arg value="-M urn:oasis:names:tc:SAML:1.0:am:password"/>
      <arg value="-I ${iso.8601.NOW}"/>
      <arg value="-D dateTime.pattern=${dateTime.pattern}"/>
      <arg value="-i 255.255.255.255"/>
      <arg value="-D Attribute.mail.Name=urn:oid:0.9.2342.19200300.100.1.3 Attribute.mail.Value=trscavo@gmail.com"/>
      <arg value="-X"/>
      <arg value="-o testgatewayproxy.pem"/>
    </java>
    <echo message="Output in testgatewayproxy.pem"/>
    <echo message="Complete."/>
    <echo message="${line.separator}See the log for test details."/>
  </target>
  
  <target name="test-gram-audit">
    <echo message="Testing command-line interface of GRAM Audit Tools"/>
    <antcall target="test-gram-audit-std"/>
    <antcall target="test-gram-audit-ext"/>
    <echo message="${line.separator}See the log for test details."/>
  </target>
  
  <target name="test-gram-audit-std" 
    depends="compile, clean-db-all, load-audit-table">
    <echo message="Testing standard GRAM audit table"/>
    <echo message="Running test #1..."/>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditTestTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes"
          output="infile1.txt">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-q"/>
    </java>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditRetrievalTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes"
          output="outfile1.txt">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-t 0"/>
      <arg value="-f infile1.txt"/>
    </java>
    <echo message="Output in outfile1.txt"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #2..."/>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditTestTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes"
          output="infile2.txt">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-q"/>
      <arg value="-Z"/>
    </java>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditRetrievalTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-t 0"/>
      <arg value="-f infile2.txt"/>
      <arg value="-Z"/>
      <arg value="-o outfile2.txt"/>
    </java>
    <echo message="Output in outfile2.txt"/>
    <echo message="Complete."/>
  </target>
  
  <target name="test-gram-audit-ext"
    depends="compile, clean-db-all, alter-audit-table">
    <echo message="Testing extended GRAM audit table"/>
    <echo message="Running test #3..."/>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditTestTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes"
          output="infile3.txt">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-q"/>
    </java>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditRetrievalTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes"
          output="outfile3.txt">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-t 0"/>
      <arg value="-f infile3.txt"/>
    </java>
    <echo message="Output in outfile3.txt"/>
    <echo message="Complete."/>
    <echo message="${line.separator}Running test #4..."/>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditTestTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes"
          output="infile4.txt">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-q"/>
      <arg value="-Z"/>
    </java>
    <java classname="org.teragrid.ncsa.gridshib.tool.gram.GRAMAuditRetrievalTool"
          fork="yes" classpathref="test-cli-classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg value="-d"/>
      <arg value="-t 0"/>
      <arg value="-f infile4.txt"/>
      <arg value="-Z"/>
      <arg value="-o outfile4.txt"/>
    </java>
    <echo message="Output in outfile4.txt"/>
    <echo message="Complete."/>
  </target>
  
  <!-- unit tests -->
  
  <target name="run-all-tests" 
          depends="run-tests, run-teragrid-tests, run-globus-saml-tests"
    description="Run all unit tests"/>
  
  <target name="run-tests" depends="compile-tests, create-keystore"
    description="Run unit tests in ${gridshib.tests}/org/globus/gridshib">
    <junit dir="${basedir}" fork="yes" 
           haltonfailure="no" haltonerror="no" printsummary="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <classpath refid="classpath"/>
      <formatter type="plain" />
      <batchtest fork="yes">
        <fileset dir="${gridshib.tests}">
          <include name="org/globus/gridshib/**"/>
          <exclude name="**/ExtSecurityContext.java"/>
          <exclude name="**/X509BindingToolRunner.java"/>
        </fileset>
      </batchtest>
    </junit>
    <echo message="Test output in ${basedir}"/>
  </target>

  <!-- create a test JKS credential -->
  <target name="create-keystore" unless="java-keystore-exists"
    description="Creates a Java KeyStore, solely for testing purposes">
    <genkey 
      keystore="${gridshib.keyStorePath.abs}"
      storepass="${gridshib.keyStorePassword}"
      alias="${gridshib.keyStoreKeyAlias}" 
      keypass="${gridshib.keyStoreKeyPassword}"
      keyalg="RSA" validity="365">
      <dname>
        <param name="CN" value="gridshib.example.org"/>
        <param name="O"  value="example.org"/>
        <param name="C"  value="US"/>
      </dname>
    </genkey>
  </target>

  <target name="run-teragrid-tests" depends="compile-tests, create-audit-db"
    description="Run unit tests in ${gridshib.tests}/org/teragrid/ncsa/gridshib">
    <junit dir="${basedir}" fork="yes" 
           haltonfailure="yes" haltonerror="yes" printsummary="no">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <classpath refid="classpath"/>
      <formatter type="plain" />
      <batchtest fork="yes">
        <fileset dir="${gridshib.tests}">
          <include name="org/teragrid/ncsa/gridshib/**"/>
          <exclude name="**/GatewaySecurityContext.java"/>
        </fileset>
      </batchtest>
    </junit>
    <echo message="Test output in ${basedir}"/>
  </target>

  <!-- this target is functionally equivalent to the ant wrapper
       script in dir ${globus.saml.java} (without the bells and whistles) -->
  <target name="run-globus-saml-tests"
    description="Run Globus SAML unit tests in ${globus.saml.java}/tests">
    <!--<ant dir="${globus.saml.java}" target="run-tests"/>-->
    <java classname="org.apache.tools.ant.Main"
          fork="true" failonerror="true" dir="${globus.saml.java}">
      <classpath>
        <fileset dir="${globus.saml.java}">
          <include name="lib/*.jar"/>
          <include name="endorsed/*.jar"/>
        </fileset>
        <pathelement location="${java.home}/../lib/tools.jar"/>
      </classpath>
      <jvmarg value="-Dant.home=${globus.saml.java}"/>
      <arg value="-e"/>
      <arg value="run-tests"/>
    </java>
  </target>

  <target name="run" depends="compile"
    description="Run arbitrary class file">
    <condition property="classname" 
               value="org.globus.gridshib.tool.saml.SAMLAssertionIssuerTool">
      <not>
        <isset property="classname"/>
      </not>
    </condition>
    <condition property="options" value="">
      <not>
        <isset property="options"/>
      </not>
    </condition>
    <echo message="Running command line: ${classname} ${options}"/>
    <java classname="${classname}"
          fork="yes" classpathref="classpath" failonerror="yes">
      <jvmarg value="-Dgridshib.home=${gridshib.home}"/>
      <jvmarg value="-Djava.endorsed.dirs=${gridshib.home}/${gridshib.endorsed}"/>
      <jvmarg value="-Dorg.globus.gridshib.config=${org.globus.gridshib.config}"/>
      <arg line="${options}"/>
    </java>
    <echo message="Complete."/>
  </target>
  
  <!-- clean targets -->
  
  <target name="clean-all" depends="clean, clean-db-all" 
    description="Clean all working directories">
    <ant dir="${globus.saml.java}" target="clean-all">
      <property name="javadocs" value="${globus.saml.javadocs.abs}"/>
    </ant>
  </target>
  <target name="clean" depends="clean-build, clean-docs, clean-tests"
    description="Clean working directories"/>
  <target name="clean-build"
    description="Clean build directories">
    <delete dir="${gridshib.build}"/>
    <delete dir="${gridshib.conf}"/>
    <delete dir="${gridshib.logs}"/>
    <delete file="${gridshib.common.jarfile}"/>
    <delete file="${gridshib.saml.jarfile}"/>
    <!--<delete file="${gridshib.bootPath}"/>-->
    <delete file="${default.logConfigPath}"/>
  </target>
  <target name="clean-all-docs" depends="clean-docs, clean-globus-saml-docs"
    description="Clean all javadocs directories"/>
  <target name="clean-docs"
    description="Clean javadocs directory">
    <delete dir="${gridshib.javadocs}"/>
  </target>
  <target name="clean-globus-saml-docs"
    description="Clean Globus SAML javadocs directory">
    <ant dir="${globus.saml.java}" target="clean-javadocs">
      <property name="javadocs" value="${globus.saml.javadocs.abs}"/>
    </ant>
  </target>  
  <target name="clean-all-tests" depends="clean-tests, clean-globus-saml-tests"
    description="Clean all test output"/>
  <target name="clean-tests"
    description="Clean test output">
    <delete>   
      <fileset dir="${basedir}" includes="TEST*"/>
    </delete>
  </target>
  <target name="clean-globus-saml-tests"
    description="Clean Globus SAML test output">
    <ant dir="${globus.saml.java}" target="clean-junit"/>
  </target>

</project>
