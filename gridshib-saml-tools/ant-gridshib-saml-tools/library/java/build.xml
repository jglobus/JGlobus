<!-- Build configutaion for OpenSAML/Java - Walter Hoehn 06/05/2002
     +~ (Globus) OpenSAML/Java - Tim Freeman 01/27/2006 -->

<project name="GlobusSAML" default="dist" basedir=".">

    <!-- load build.properties files -->
    <property file="${user.home}/build.properties"/>
    <property file="build.properties"/>
    
    <!-- Set global properties for this build -->
    <property name="root" value="." />
    <property name="src" value="src" />
    <property name="tests" value="tests" />
    <property name="examples" value="examples" />
    <property name="data" value="data" />
    <property name="build" value="build" />
    <property name="libdir" value="lib" />
    <property name="endorsed" value="endorsed" />
    <property name="dist" value="dist" />
    <property name="docs" value="doc" />
    <property name="javadocs" value="${docs}/api" />
    <property name="year" value="2005"/>
    <property name="copyright" value="Copyright &#169; ${year} UCAID. All Rights Reserved."/>
    <property name="javaversion" value="1.4" />

    <property name="jarfile" value="${dist}/${globus.saml.name}.jar"/>
    <property name="tarfile" value="${dist}/${globus.saml.name}.tar"/>
    <property name="gzipfile" value="${dist}/${globus.saml.name}.tar.gz"/>
    <property name="zipfile" value="${dist}/${globus.saml.name}.zip"/>

    <!-- Macro substitutions for conditional compilation. -->

    <!-- Disable JDK4 code if javaversion is 1.3 -->
    <condition property="ifjdk4.token" value="/*">
        <equals arg1="${javaversion}" arg2="1.3"/>
    </condition>
    <condition property="endjdk4.token" value="*/">
        <equals arg1="${javaversion}" arg2="1.3"/>
    </condition>
    <property name="ifjdk4.token" value=""/>
    <property name="endjdk4.token" value=""/>

    <!-- Disable JDK5 code if javaversion is 1.3 or 1.4 -->
    <condition property="ifjdk5.token" value="/*">
      <or>
          <equals arg1="${javaversion}" arg2="1.3"/>
          <equals arg1="${javaversion}" arg2="1.4"/>
      </or>
    </condition>
    <condition property="endjdk5.token" value="*/">
      <or>
          <equals arg1="${javaversion}" arg2="1.3"/>
          <equals arg1="${javaversion}" arg2="1.4"/>
      </or>
    </condition>
    <property name="ifjdk5.token" value=""/>
    <property name="endjdk5.token" value=""/>

    <!-- Construct the CLASSPATH -->
    <path id="build.path">
        <pathelement path="${classpath}" />
        <pathelement location="${build}" />
        <fileset dir="${libdir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Prepare directory structure for project build-->
    <target name="init">
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
        <!-- copy the property files -->
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.properties"/>
        </copy>
    </target>

    <!-- Compile classes and move them to ${build} -->
    <target name="compile" depends="init">
        <copy todir="${src}/${javaversion}">
            <fileset dir="${src}">
                <exclude name="${javaversion}/**"/>
                <include name="**/*.java"/>
            </fileset>
            <filterset begintoken="/*[" endtoken="]/">
                <filter token="if JDK4" value="${ifjdk4.token}"/>
                <filter token="if JDK5" value="${ifjdk5.token}"/>
            </filterset>
            <filterset begintoken="/[" endtoken="]*/">
                <filter token="end JDK4" value="${endjdk4.token}"/>
                <filter token="end JDK5" value="${endjdk5.token}"/>
            </filterset>
        </copy>
        <javac srcdir="${src}/${javaversion}" destdir="${build}" includes="**/*.java" fork="yes" source="${javaversion}">
            <compilerarg line="-J-Djava.endorsed.dirs=${endorsed}" />
            <classpath refid="build.path" />
        </javac>
        <copy todir="${build}/schemas">
            <fileset dir="${src}/schemas"/>
        </copy>
        <copy todir="${build}/org/globus/opensaml11/md/schemas/">
            <fileset dir="${src}/org/globus/opensaml11/md/schemas/">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${build}/conf">
            <fileset dir="${src}/conf"/>
        </copy>
        <delete dir="${src}/${javaversion}"/>
    </target>
    <target name="compile-debug" depends="init">
        <copy todir="${src}/${javaversion}">
            <fileset dir="${src}">
                <exclude name="${javaversion}/**"/>
                <include name="**/*.java"/>
            </fileset>
            <filterset begintoken="/*[" endtoken="]/">
                <filter token="if JDK4" value="${ifjdk4.token}"/>
                <filter token="if JDK5" value="${ifjdk5.token}"/>
            </filterset>
            <filterset begintoken="/[" endtoken="]*/">
                <filter token="end JDK4" value="${endjdk4.token}"/>
                <filter token="end JDK5" value="${endjdk5.token}"/>
            </filterset>
        </copy>
        <javac srcdir="${src}/${javaversion}" destdir="${build}" includes="**/*.java" fork="yes" debug="yes" source="${javaversion}">
            <compilerarg line="-J-Djava.endorsed.dirs=${endorsed}" />
            <classpath refid="build.path" />
        </javac>
        <copy todir="${build}/schemas">
            <fileset dir="${src}/schemas"/>
        </copy>
        <copy todir="${build}/org/globus/opensaml11/md/schemas/">
            <fileset dir="${src}/org/globus/opensaml11/md/schemas/">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${build}/conf">
            <fileset dir="${src}/conf"/>
        </copy>
        <delete dir="${src}/${javaversion}"/>
    </target>

    <!-- Generate API docs -->
    <target name="javadocs">
        <mkdir dir="${docs}" />
        <mkdir dir="${javadocs}" />
        <javadoc packagenames="org.globus.opensaml11.md.*, 
                               org.globus.opensaml11.saml.*"
            sourcepath="${src}" destdir="${javadocs}"
            author="true" version="true"
            windowtitle="Globus SAML ${globus.saml.version} Java API" 
            doctitle="Globus SAML ${globus.saml.version} Java API"
            bottom="${copyright}">
            <classpath refid="build.path" />
            <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
            <link href="http://jakarta.apache.org/commons/codec/apidocs/"/>
        </javadoc>
    </target>

    <!-- Create product distribution and move it to ${dist} -->
    <target name="dist" depends="clean-build, compile, run-tests, create-jar" />
    <target name="dist-debug" depends="clean-build, compile-debug, run-tests, create-jar" />
    <target name="create-jar" depends="compile">
        <jar jarfile="${jarfile}" basedir="${build}" />
    </target>
    
    <target name="create-gzip" depends="dist, javadocs"
        description="Create a gzip file">
        <tar destfile="${tarfile}">
            <tarfileset dir=".">
                <patternset id="dist-fileset">
                    <include name="${data}/**"/>
                    <include name="${docs}/**"/>
                    <include name="${libdir}/**"/>
                    <include name="${endorsed}/**"/>
                    <include name="${src}/**"/>
                    <include name="${tests}/**"/>
                    <include name="build.xml"/>
                    <include name="ant"/>
                    <include name="ant.bat"/>
                    <include name="cpappend.bat"/>
                    <include name="${jarfile}"/>
                </patternset>
            </tarfileset>
        </tar>
        <gzip src="${tarfile}" destfile="${gzipfile}"/>
        <delete file="${tarfile}"/>
    </target>

    <target name="create-zip" depends="dist, javadocs"
        description="Create a zip file">
        <zip destfile="${zipfile}">
            <fileset dir=".">
                <patternset refid="dist-fileset"/>
            </fileset>
        </zip>
    </target>

    <!-- compile unit tests -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="${tests}" destdir="${build}" includes="**/*.java" debug="on">
            <classpath refid="build.path" />
        </javac>
    </target>

    <!-- run unit tests -->
    <target name="run-tests" depends="compile-tests">
        <junit dir="${root}" fork="yes" 
             haltonfailure="yes" haltonerror="yes" printsummary="no">
            <jvmarg value="-Djava.endorsed.dirs=${endorsed}" />
            <classpath refid="build.path"/>
            <formatter type="plain" />
            <batchtest>
                <fileset dir="${tests}">
                    <exclude name="**/Artifact*.java"/>
                    <exclude name="**/NameIdentifierTestCase.java"/>
                    <exclude name="**/SAMLTestCase.java"/>
                    <exclude name="**/SOAPHTTPBindingTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <!-- Cleanup after the build, test, and distribution processes -->
    <target name="clean-all" depends="clean-build, clean-dist, clean-junit, clean-logs" />
    <target name="clean-build">
        <delete dir="${build}" />
    </target>
    <target name="clean-junit"
        description="Clean junit test output">
        <delete>   
            <fileset dir="${basedir}" includes="TEST*.txt"/>
        </delete>   
    </target>
    <target name="clean-logs"
        description="Clean log output">
        <delete>   
            <fileset dir="${basedir}" includes="*.log"/>
        </delete>   
    </target>
    <target name="clean-dist">
        <delete dir="${dist}" />
    </target>

    <target name="clean-javadocs">
        <delete dir="${javadocs}" />
    </target>

    <!-- Developer Examples: -->

    <target name="compile-examples" depends="compile">
        <javac srcdir="${examples}" destdir="${build}" includes="**/*.java" debug="on">
            <classpath refid="build.path" />
        </javac>
    </target>

    <path id="examples.classpath">
        <pathelement path="${classpath}" />
        <pathelement location="${build}" />
        <fileset dir="${libdir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${endorsed}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <target name="example1" depends="compile-examples">
        <java classname="org.globus.opensaml11.md.example1.MetadataReader">
            <arg value="data/org/globus/opensaml11/md/example1/metadata.xml"/>
            <classpath refid="examples.classpath" />
        </java>
    </target>

</project>
